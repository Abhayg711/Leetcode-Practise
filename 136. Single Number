Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

#################################### Solution ####################################
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        for ele in range(len(nums)):
            temp = nums.count(nums[ele])
            if temp == 1:
                return nums[ele]
                
#### Unoptimized Solution ####
#        for ele in range(len(nums)):
#            out = [[nums[ele], nums.count(nums[ele]) for nums[ele] in set(nums)]]
#        temp = list(set(nums))
#        for i in range(len(temp)):
#            count = 0
#            for ele in nums:
#                if ele == temp[i]:
#                    count = count + 1
#                    if count >= 2:
#                        break
#            if count == 1:
#                return temp[i]
