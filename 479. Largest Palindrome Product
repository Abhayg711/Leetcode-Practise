Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.

 

Example 1:

Input: n = 2
Output: 987
Explanation: 99 x 91 = 9009, 9009 % 1337 = 987
Example 2:

Input: n = 1
Output: 9
 

Constraints:

1 <= n <= 8

########################################### Solution ###########################################
class Solution:
    def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        else:
            pal = []
            for i in range((10**n) - 1, 10**(n-1), -1):
                for j in range((10**n) - 1, 10**(n-1), -1):
                    test_num = i*j
                    if str(test_num) == str(test_num)[::-1]:
                        pal.append(int(test_num))
            pal = sorted(pal)
            return (int(pal[-1]))%1337

#### Optimized Solution ####
            
            
